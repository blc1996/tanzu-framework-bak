#@ load("/values.star", "values")
#@ load("@ytt:overlay", "overlay")
#@ load("/globals.star", "get_image_location", "globals")
#@ load("/libs/constants.lib.yaml", "dex_tls_secret_name")

#@ if values.tkg_cluster_role != "workload":

#@overlay/match by=overlay.subset({"kind": "Deployment", "metadata": {"name": "dex"}})
---
spec:
  replicas: #@ values.dex.deployment.replicas
  template:
    spec:
      containers:
      #@overlay/match by=overlay.subset({"name": "dex"})
      - name: dex
        #@overlay/match missing_ok=True
        env:
        #@ if/end values.http_proxy:
        - name: HTTP_PROXY
          value: #@ values.http_proxy
        #@ if/end values.https_proxy:
        - name: HTTPS_PROXY
          value: #@ values.https_proxy
        #@ if/end values.no_proxy:
        - name: NO_PROXY
          value: #@ values.no_proxy
        #@ if values.dex.config.connector == "oidc":
        - name: OIDC_CLIENT_ID
          valueFrom:
            secretKeyRef:
              key: clientId
              name: oidc
        - name: OIDC_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              key: clientSecret
              name: oidc
        #@ end
        image: #@ get_image_location(values.dex.image.repository, values.dex.image.name, values.dex.image.tag)
        imagePullPolicy: #@ values.dex.image.pullPolicy
      volumes:
      #@ if values.dex.config.connector == "oidc":
      #@overlay/append
      - name: oidc
        secret:
          defaultMode: 420
          secretName: oidc
      #@ end
      #@overlay/match by=overlay.subset({"name": "tls"})
      - name: tls
        secret:
          secretName: #@ dex_tls_secret_name()

#@ end
