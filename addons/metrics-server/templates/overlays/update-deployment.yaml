#@ load("/values.star", "values")
#@ load("@ytt:overlay", "overlay")
#@ load("/libs/metrics-server.lib.yaml", "add_metrics_server_args", "generate_metrics_server_nodeseletor")
#@ load("@ytt:template", "template")


#@overlay/match by=overlay.subset({"kind": "Deployment", "metadata": {"name": "metrics-server"}})
---
spec:
  strategy:
    type: #@ values.metricsServer.config.updateStrategy
  template:
    spec:
      containers:
      #@overlay/match by=overlay.subset({"name": "metrics-server"})
      - name: metrics-server
        #@ if len(values.metricsServer.config.args) != 0:
        args: #@ add_metrics_server_args()
        #@ end
        image: #@ '{0}/{1}:{2}'.format(values.imageInfo.imageRepository, values.imageInfo.images.metricsServerImage.imagePath, values.imageInfo.images.metricsServerImage.tag)
        imagePullPolicy: #@ values.imageInfo.imagePullPolicy
        livenessProbe:
          failureThreshold: #@ values.metricsServer.config.probe.failureThreshold
          periodSeconds: #@ values.metricsServer.config.probe.periodSeconds
        readinessProbe:
          failureThreshold: #@ values.metricsServer.config.probe.failureThreshold
          periodSeconds: #@ values.metricsServer.config.probe.periodSeconds
      #@overlay/match missing_ok=True
      nodeSelector: #@ generate_metrics_server_nodeseletor()
      #@ if hasattr(values.metricsServer.config, 'tolerations') and values.metricsServer.config.tolerations:
      #@overlay/match missing_ok=True
      tolerations: #@ values.metricsServer.config.tolerations
      #@ end
      