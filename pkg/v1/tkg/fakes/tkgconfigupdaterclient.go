// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	yaml "gopkg.in/yaml.v3"

	"github.com/vmware-tanzu-private/core/pkg/v1/tkg/tkgconfigupdater"
)

type TKGConfigUpdaterClient struct {
	CheckBOMsNeedUpdateStub        func() (bool, error)
	checkBOMsNeedUpdateMutex       sync.RWMutex
	checkBOMsNeedUpdateArgsForCall []struct {
	}
	checkBOMsNeedUpdateReturns struct {
		result1 bool
		result2 error
	}
	checkBOMsNeedUpdateReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	CheckInfrastructureVersionStub        func(string) (string, error)
	checkInfrastructureVersionMutex       sync.RWMutex
	checkInfrastructureVersionArgsForCall []struct {
		arg1 string
	}
	checkInfrastructureVersionReturns struct {
		result1 string
		result2 error
	}
	checkInfrastructureVersionReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	CheckProvidersNeedUpdateStub        func() (bool, error)
	checkProvidersNeedUpdateMutex       sync.RWMutex
	checkProvidersNeedUpdateArgsForCall []struct {
	}
	checkProvidersNeedUpdateReturns struct {
		result1 bool
		result2 error
	}
	checkProvidersNeedUpdateReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	CheckTkgConfigNeedUpdateStub        func() (bool, string, error)
	checkTkgConfigNeedUpdateMutex       sync.RWMutex
	checkTkgConfigNeedUpdateArgsForCall []struct {
	}
	checkTkgConfigNeedUpdateReturns struct {
		result1 bool
		result2 string
		result3 error
	}
	checkTkgConfigNeedUpdateReturnsOnCall map[int]struct {
		result1 bool
		result2 string
		result3 error
	}
	DecodeCredentialsInViperStub        func() error
	decodeCredentialsInViperMutex       sync.RWMutex
	decodeCredentialsInViperArgsForCall []struct {
	}
	decodeCredentialsInViperReturns struct {
		result1 error
	}
	decodeCredentialsInViperReturnsOnCall map[int]struct {
		result1 error
	}
	EnsureBOMFilesStub        func() error
	ensureBOMFilesMutex       sync.RWMutex
	ensureBOMFilesArgsForCall []struct {
	}
	ensureBOMFilesReturns struct {
		result1 error
	}
	ensureBOMFilesReturnsOnCall map[int]struct {
		result1 error
	}
	EnsureConfigImagesStub        func() error
	ensureConfigImagesMutex       sync.RWMutex
	ensureConfigImagesArgsForCall []struct {
	}
	ensureConfigImagesReturns struct {
		result1 error
	}
	ensureConfigImagesReturnsOnCall map[int]struct {
		result1 error
	}
	EnsureConfigPrerequisiteStub        func(bool, bool) error
	ensureConfigPrerequisiteMutex       sync.RWMutex
	ensureConfigPrerequisiteArgsForCall []struct {
		arg1 bool
		arg2 bool
	}
	ensureConfigPrerequisiteReturns struct {
		result1 error
	}
	ensureConfigPrerequisiteReturnsOnCall map[int]struct {
		result1 error
	}
	EnsureCredEncodingStub        func(*yaml.Node)
	ensureCredEncodingMutex       sync.RWMutex
	ensureCredEncodingArgsForCall []struct {
		arg1 *yaml.Node
	}
	EnsureImagesStub        func(bool, *yaml.Node) error
	ensureImagesMutex       sync.RWMutex
	ensureImagesArgsForCall []struct {
		arg1 bool
		arg2 *yaml.Node
	}
	ensureImagesReturns struct {
		result1 error
	}
	ensureImagesReturnsOnCall map[int]struct {
		result1 error
	}
	EnsureProvidersStub        func(bool, *yaml.Node) error
	ensureProvidersMutex       sync.RWMutex
	ensureProvidersArgsForCall []struct {
		arg1 bool
		arg2 *yaml.Node
	}
	ensureProvidersReturns struct {
		result1 error
	}
	ensureProvidersReturnsOnCall map[int]struct {
		result1 error
	}
	EnsureTemplateFilesStub        func(bool) error
	ensureTemplateFilesMutex       sync.RWMutex
	ensureTemplateFilesArgsForCall []struct {
		arg1 bool
	}
	ensureTemplateFilesReturns struct {
		result1 error
	}
	ensureTemplateFilesReturnsOnCall map[int]struct {
		result1 error
	}
	GetDefaultInfrastructureVersionStub        func(string) (string, error)
	getDefaultInfrastructureVersionMutex       sync.RWMutex
	getDefaultInfrastructureVersionArgsForCall []struct {
		arg1 string
	}
	getDefaultInfrastructureVersionReturns struct {
		result1 string
		result2 error
	}
	getDefaultInfrastructureVersionReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	GetUpdateStatusStub        func() (bool, bool, bool, error)
	getUpdateStatusMutex       sync.RWMutex
	getUpdateStatusArgsForCall []struct {
	}
	getUpdateStatusReturns struct {
		result1 bool
		result2 bool
		result3 bool
		result4 error
	}
	getUpdateStatusReturnsOnCall map[int]struct {
		result1 bool
		result2 bool
		result3 bool
		result4 error
	}
	SaveTemplateFilesStub        func(string, bool) error
	saveTemplateFilesMutex       sync.RWMutex
	saveTemplateFilesArgsForCall []struct {
		arg1 string
		arg2 bool
	}
	saveTemplateFilesReturns struct {
		result1 error
	}
	saveTemplateFilesReturnsOnCall map[int]struct {
		result1 error
	}
	SetDefaultConfigurationStub        func()
	setDefaultConfigurationMutex       sync.RWMutex
	setDefaultConfigurationArgsForCall []struct {
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *TKGConfigUpdaterClient) CheckBOMsNeedUpdate() (bool, error) {
	fake.checkBOMsNeedUpdateMutex.Lock()
	ret, specificReturn := fake.checkBOMsNeedUpdateReturnsOnCall[len(fake.checkBOMsNeedUpdateArgsForCall)]
	fake.checkBOMsNeedUpdateArgsForCall = append(fake.checkBOMsNeedUpdateArgsForCall, struct {
	}{})
	fake.recordInvocation("CheckBOMsNeedUpdate", []interface{}{})
	fake.checkBOMsNeedUpdateMutex.Unlock()
	if fake.CheckBOMsNeedUpdateStub != nil {
		return fake.CheckBOMsNeedUpdateStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.checkBOMsNeedUpdateReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *TKGConfigUpdaterClient) CheckBOMsNeedUpdateCallCount() int {
	fake.checkBOMsNeedUpdateMutex.RLock()
	defer fake.checkBOMsNeedUpdateMutex.RUnlock()
	return len(fake.checkBOMsNeedUpdateArgsForCall)
}

func (fake *TKGConfigUpdaterClient) CheckBOMsNeedUpdateCalls(stub func() (bool, error)) {
	fake.checkBOMsNeedUpdateMutex.Lock()
	defer fake.checkBOMsNeedUpdateMutex.Unlock()
	fake.CheckBOMsNeedUpdateStub = stub
}

func (fake *TKGConfigUpdaterClient) CheckBOMsNeedUpdateReturns(result1 bool, result2 error) {
	fake.checkBOMsNeedUpdateMutex.Lock()
	defer fake.checkBOMsNeedUpdateMutex.Unlock()
	fake.CheckBOMsNeedUpdateStub = nil
	fake.checkBOMsNeedUpdateReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *TKGConfigUpdaterClient) CheckBOMsNeedUpdateReturnsOnCall(i int, result1 bool, result2 error) {
	fake.checkBOMsNeedUpdateMutex.Lock()
	defer fake.checkBOMsNeedUpdateMutex.Unlock()
	fake.CheckBOMsNeedUpdateStub = nil
	if fake.checkBOMsNeedUpdateReturnsOnCall == nil {
		fake.checkBOMsNeedUpdateReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.checkBOMsNeedUpdateReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *TKGConfigUpdaterClient) CheckInfrastructureVersion(arg1 string) (string, error) {
	fake.checkInfrastructureVersionMutex.Lock()
	ret, specificReturn := fake.checkInfrastructureVersionReturnsOnCall[len(fake.checkInfrastructureVersionArgsForCall)]
	fake.checkInfrastructureVersionArgsForCall = append(fake.checkInfrastructureVersionArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("CheckInfrastructureVersion", []interface{}{arg1})
	fake.checkInfrastructureVersionMutex.Unlock()
	if fake.CheckInfrastructureVersionStub != nil {
		return fake.CheckInfrastructureVersionStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.checkInfrastructureVersionReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *TKGConfigUpdaterClient) CheckInfrastructureVersionCallCount() int {
	fake.checkInfrastructureVersionMutex.RLock()
	defer fake.checkInfrastructureVersionMutex.RUnlock()
	return len(fake.checkInfrastructureVersionArgsForCall)
}

func (fake *TKGConfigUpdaterClient) CheckInfrastructureVersionCalls(stub func(string) (string, error)) {
	fake.checkInfrastructureVersionMutex.Lock()
	defer fake.checkInfrastructureVersionMutex.Unlock()
	fake.CheckInfrastructureVersionStub = stub
}

func (fake *TKGConfigUpdaterClient) CheckInfrastructureVersionArgsForCall(i int) string {
	fake.checkInfrastructureVersionMutex.RLock()
	defer fake.checkInfrastructureVersionMutex.RUnlock()
	argsForCall := fake.checkInfrastructureVersionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *TKGConfigUpdaterClient) CheckInfrastructureVersionReturns(result1 string, result2 error) {
	fake.checkInfrastructureVersionMutex.Lock()
	defer fake.checkInfrastructureVersionMutex.Unlock()
	fake.CheckInfrastructureVersionStub = nil
	fake.checkInfrastructureVersionReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *TKGConfigUpdaterClient) CheckInfrastructureVersionReturnsOnCall(i int, result1 string, result2 error) {
	fake.checkInfrastructureVersionMutex.Lock()
	defer fake.checkInfrastructureVersionMutex.Unlock()
	fake.CheckInfrastructureVersionStub = nil
	if fake.checkInfrastructureVersionReturnsOnCall == nil {
		fake.checkInfrastructureVersionReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.checkInfrastructureVersionReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *TKGConfigUpdaterClient) CheckProvidersNeedUpdate() (bool, error) {
	fake.checkProvidersNeedUpdateMutex.Lock()
	ret, specificReturn := fake.checkProvidersNeedUpdateReturnsOnCall[len(fake.checkProvidersNeedUpdateArgsForCall)]
	fake.checkProvidersNeedUpdateArgsForCall = append(fake.checkProvidersNeedUpdateArgsForCall, struct {
	}{})
	fake.recordInvocation("CheckProvidersNeedUpdate", []interface{}{})
	fake.checkProvidersNeedUpdateMutex.Unlock()
	if fake.CheckProvidersNeedUpdateStub != nil {
		return fake.CheckProvidersNeedUpdateStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.checkProvidersNeedUpdateReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *TKGConfigUpdaterClient) CheckProvidersNeedUpdateCallCount() int {
	fake.checkProvidersNeedUpdateMutex.RLock()
	defer fake.checkProvidersNeedUpdateMutex.RUnlock()
	return len(fake.checkProvidersNeedUpdateArgsForCall)
}

func (fake *TKGConfigUpdaterClient) CheckProvidersNeedUpdateCalls(stub func() (bool, error)) {
	fake.checkProvidersNeedUpdateMutex.Lock()
	defer fake.checkProvidersNeedUpdateMutex.Unlock()
	fake.CheckProvidersNeedUpdateStub = stub
}

func (fake *TKGConfigUpdaterClient) CheckProvidersNeedUpdateReturns(result1 bool, result2 error) {
	fake.checkProvidersNeedUpdateMutex.Lock()
	defer fake.checkProvidersNeedUpdateMutex.Unlock()
	fake.CheckProvidersNeedUpdateStub = nil
	fake.checkProvidersNeedUpdateReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *TKGConfigUpdaterClient) CheckProvidersNeedUpdateReturnsOnCall(i int, result1 bool, result2 error) {
	fake.checkProvidersNeedUpdateMutex.Lock()
	defer fake.checkProvidersNeedUpdateMutex.Unlock()
	fake.CheckProvidersNeedUpdateStub = nil
	if fake.checkProvidersNeedUpdateReturnsOnCall == nil {
		fake.checkProvidersNeedUpdateReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.checkProvidersNeedUpdateReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *TKGConfigUpdaterClient) CheckTkgConfigNeedUpdate() (bool, string, error) {
	fake.checkTkgConfigNeedUpdateMutex.Lock()
	ret, specificReturn := fake.checkTkgConfigNeedUpdateReturnsOnCall[len(fake.checkTkgConfigNeedUpdateArgsForCall)]
	fake.checkTkgConfigNeedUpdateArgsForCall = append(fake.checkTkgConfigNeedUpdateArgsForCall, struct {
	}{})
	fake.recordInvocation("CheckTkgConfigNeedUpdate", []interface{}{})
	fake.checkTkgConfigNeedUpdateMutex.Unlock()
	if fake.CheckTkgConfigNeedUpdateStub != nil {
		return fake.CheckTkgConfigNeedUpdateStub()
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.checkTkgConfigNeedUpdateReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *TKGConfigUpdaterClient) CheckTkgConfigNeedUpdateCallCount() int {
	fake.checkTkgConfigNeedUpdateMutex.RLock()
	defer fake.checkTkgConfigNeedUpdateMutex.RUnlock()
	return len(fake.checkTkgConfigNeedUpdateArgsForCall)
}

func (fake *TKGConfigUpdaterClient) CheckTkgConfigNeedUpdateCalls(stub func() (bool, string, error)) {
	fake.checkTkgConfigNeedUpdateMutex.Lock()
	defer fake.checkTkgConfigNeedUpdateMutex.Unlock()
	fake.CheckTkgConfigNeedUpdateStub = stub
}

func (fake *TKGConfigUpdaterClient) CheckTkgConfigNeedUpdateReturns(result1 bool, result2 string, result3 error) {
	fake.checkTkgConfigNeedUpdateMutex.Lock()
	defer fake.checkTkgConfigNeedUpdateMutex.Unlock()
	fake.CheckTkgConfigNeedUpdateStub = nil
	fake.checkTkgConfigNeedUpdateReturns = struct {
		result1 bool
		result2 string
		result3 error
	}{result1, result2, result3}
}

func (fake *TKGConfigUpdaterClient) CheckTkgConfigNeedUpdateReturnsOnCall(i int, result1 bool, result2 string, result3 error) {
	fake.checkTkgConfigNeedUpdateMutex.Lock()
	defer fake.checkTkgConfigNeedUpdateMutex.Unlock()
	fake.CheckTkgConfigNeedUpdateStub = nil
	if fake.checkTkgConfigNeedUpdateReturnsOnCall == nil {
		fake.checkTkgConfigNeedUpdateReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 string
			result3 error
		})
	}
	fake.checkTkgConfigNeedUpdateReturnsOnCall[i] = struct {
		result1 bool
		result2 string
		result3 error
	}{result1, result2, result3}
}

func (fake *TKGConfigUpdaterClient) DecodeCredentialsInViper() error {
	fake.decodeCredentialsInViperMutex.Lock()
	ret, specificReturn := fake.decodeCredentialsInViperReturnsOnCall[len(fake.decodeCredentialsInViperArgsForCall)]
	fake.decodeCredentialsInViperArgsForCall = append(fake.decodeCredentialsInViperArgsForCall, struct {
	}{})
	fake.recordInvocation("DecodeCredentialsInViper", []interface{}{})
	fake.decodeCredentialsInViperMutex.Unlock()
	if fake.DecodeCredentialsInViperStub != nil {
		return fake.DecodeCredentialsInViperStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.decodeCredentialsInViperReturns
	return fakeReturns.result1
}

func (fake *TKGConfigUpdaterClient) DecodeCredentialsInViperCallCount() int {
	fake.decodeCredentialsInViperMutex.RLock()
	defer fake.decodeCredentialsInViperMutex.RUnlock()
	return len(fake.decodeCredentialsInViperArgsForCall)
}

func (fake *TKGConfigUpdaterClient) DecodeCredentialsInViperCalls(stub func() error) {
	fake.decodeCredentialsInViperMutex.Lock()
	defer fake.decodeCredentialsInViperMutex.Unlock()
	fake.DecodeCredentialsInViperStub = stub
}

func (fake *TKGConfigUpdaterClient) DecodeCredentialsInViperReturns(result1 error) {
	fake.decodeCredentialsInViperMutex.Lock()
	defer fake.decodeCredentialsInViperMutex.Unlock()
	fake.DecodeCredentialsInViperStub = nil
	fake.decodeCredentialsInViperReturns = struct {
		result1 error
	}{result1}
}

func (fake *TKGConfigUpdaterClient) DecodeCredentialsInViperReturnsOnCall(i int, result1 error) {
	fake.decodeCredentialsInViperMutex.Lock()
	defer fake.decodeCredentialsInViperMutex.Unlock()
	fake.DecodeCredentialsInViperStub = nil
	if fake.decodeCredentialsInViperReturnsOnCall == nil {
		fake.decodeCredentialsInViperReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.decodeCredentialsInViperReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *TKGConfigUpdaterClient) EnsureBOMFiles() error {
	fake.ensureBOMFilesMutex.Lock()
	ret, specificReturn := fake.ensureBOMFilesReturnsOnCall[len(fake.ensureBOMFilesArgsForCall)]
	fake.ensureBOMFilesArgsForCall = append(fake.ensureBOMFilesArgsForCall, struct {
	}{})
	fake.recordInvocation("EnsureBOMFiles", []interface{}{})
	fake.ensureBOMFilesMutex.Unlock()
	if fake.EnsureBOMFilesStub != nil {
		return fake.EnsureBOMFilesStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.ensureBOMFilesReturns
	return fakeReturns.result1
}

func (fake *TKGConfigUpdaterClient) EnsureBOMFilesCallCount() int {
	fake.ensureBOMFilesMutex.RLock()
	defer fake.ensureBOMFilesMutex.RUnlock()
	return len(fake.ensureBOMFilesArgsForCall)
}

func (fake *TKGConfigUpdaterClient) EnsureBOMFilesCalls(stub func() error) {
	fake.ensureBOMFilesMutex.Lock()
	defer fake.ensureBOMFilesMutex.Unlock()
	fake.EnsureBOMFilesStub = stub
}

func (fake *TKGConfigUpdaterClient) EnsureBOMFilesReturns(result1 error) {
	fake.ensureBOMFilesMutex.Lock()
	defer fake.ensureBOMFilesMutex.Unlock()
	fake.EnsureBOMFilesStub = nil
	fake.ensureBOMFilesReturns = struct {
		result1 error
	}{result1}
}

func (fake *TKGConfigUpdaterClient) EnsureBOMFilesReturnsOnCall(i int, result1 error) {
	fake.ensureBOMFilesMutex.Lock()
	defer fake.ensureBOMFilesMutex.Unlock()
	fake.EnsureBOMFilesStub = nil
	if fake.ensureBOMFilesReturnsOnCall == nil {
		fake.ensureBOMFilesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.ensureBOMFilesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *TKGConfigUpdaterClient) EnsureConfigImages() error {
	fake.ensureConfigImagesMutex.Lock()
	ret, specificReturn := fake.ensureConfigImagesReturnsOnCall[len(fake.ensureConfigImagesArgsForCall)]
	fake.ensureConfigImagesArgsForCall = append(fake.ensureConfigImagesArgsForCall, struct {
	}{})
	fake.recordInvocation("EnsureConfigImages", []interface{}{})
	fake.ensureConfigImagesMutex.Unlock()
	if fake.EnsureConfigImagesStub != nil {
		return fake.EnsureConfigImagesStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.ensureConfigImagesReturns
	return fakeReturns.result1
}

func (fake *TKGConfigUpdaterClient) EnsureConfigImagesCallCount() int {
	fake.ensureConfigImagesMutex.RLock()
	defer fake.ensureConfigImagesMutex.RUnlock()
	return len(fake.ensureConfigImagesArgsForCall)
}

func (fake *TKGConfigUpdaterClient) EnsureConfigImagesCalls(stub func() error) {
	fake.ensureConfigImagesMutex.Lock()
	defer fake.ensureConfigImagesMutex.Unlock()
	fake.EnsureConfigImagesStub = stub
}

func (fake *TKGConfigUpdaterClient) EnsureConfigImagesReturns(result1 error) {
	fake.ensureConfigImagesMutex.Lock()
	defer fake.ensureConfigImagesMutex.Unlock()
	fake.EnsureConfigImagesStub = nil
	fake.ensureConfigImagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *TKGConfigUpdaterClient) EnsureConfigImagesReturnsOnCall(i int, result1 error) {
	fake.ensureConfigImagesMutex.Lock()
	defer fake.ensureConfigImagesMutex.Unlock()
	fake.EnsureConfigImagesStub = nil
	if fake.ensureConfigImagesReturnsOnCall == nil {
		fake.ensureConfigImagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.ensureConfigImagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *TKGConfigUpdaterClient) EnsureConfigPrerequisite(arg1 bool, arg2 bool) error {
	fake.ensureConfigPrerequisiteMutex.Lock()
	ret, specificReturn := fake.ensureConfigPrerequisiteReturnsOnCall[len(fake.ensureConfigPrerequisiteArgsForCall)]
	fake.ensureConfigPrerequisiteArgsForCall = append(fake.ensureConfigPrerequisiteArgsForCall, struct {
		arg1 bool
		arg2 bool
	}{arg1, arg2})
	fake.recordInvocation("EnsureConfigPrerequisite", []interface{}{arg1, arg2})
	fake.ensureConfigPrerequisiteMutex.Unlock()
	if fake.EnsureConfigPrerequisiteStub != nil {
		return fake.EnsureConfigPrerequisiteStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.ensureConfigPrerequisiteReturns
	return fakeReturns.result1
}

func (fake *TKGConfigUpdaterClient) EnsureConfigPrerequisiteCallCount() int {
	fake.ensureConfigPrerequisiteMutex.RLock()
	defer fake.ensureConfigPrerequisiteMutex.RUnlock()
	return len(fake.ensureConfigPrerequisiteArgsForCall)
}

func (fake *TKGConfigUpdaterClient) EnsureConfigPrerequisiteCalls(stub func(bool, bool) error) {
	fake.ensureConfigPrerequisiteMutex.Lock()
	defer fake.ensureConfigPrerequisiteMutex.Unlock()
	fake.EnsureConfigPrerequisiteStub = stub
}

func (fake *TKGConfigUpdaterClient) EnsureConfigPrerequisiteArgsForCall(i int) (bool, bool) {
	fake.ensureConfigPrerequisiteMutex.RLock()
	defer fake.ensureConfigPrerequisiteMutex.RUnlock()
	argsForCall := fake.ensureConfigPrerequisiteArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *TKGConfigUpdaterClient) EnsureConfigPrerequisiteReturns(result1 error) {
	fake.ensureConfigPrerequisiteMutex.Lock()
	defer fake.ensureConfigPrerequisiteMutex.Unlock()
	fake.EnsureConfigPrerequisiteStub = nil
	fake.ensureConfigPrerequisiteReturns = struct {
		result1 error
	}{result1}
}

func (fake *TKGConfigUpdaterClient) EnsureConfigPrerequisiteReturnsOnCall(i int, result1 error) {
	fake.ensureConfigPrerequisiteMutex.Lock()
	defer fake.ensureConfigPrerequisiteMutex.Unlock()
	fake.EnsureConfigPrerequisiteStub = nil
	if fake.ensureConfigPrerequisiteReturnsOnCall == nil {
		fake.ensureConfigPrerequisiteReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.ensureConfigPrerequisiteReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *TKGConfigUpdaterClient) EnsureCredEncoding(arg1 *yaml.Node) {
	fake.ensureCredEncodingMutex.Lock()
	fake.ensureCredEncodingArgsForCall = append(fake.ensureCredEncodingArgsForCall, struct {
		arg1 *yaml.Node
	}{arg1})
	fake.recordInvocation("EnsureCredEncoding", []interface{}{arg1})
	fake.ensureCredEncodingMutex.Unlock()
	if fake.EnsureCredEncodingStub != nil {
		fake.EnsureCredEncodingStub(arg1)
	}
}

func (fake *TKGConfigUpdaterClient) EnsureCredEncodingCallCount() int {
	fake.ensureCredEncodingMutex.RLock()
	defer fake.ensureCredEncodingMutex.RUnlock()
	return len(fake.ensureCredEncodingArgsForCall)
}

func (fake *TKGConfigUpdaterClient) EnsureCredEncodingCalls(stub func(*yaml.Node)) {
	fake.ensureCredEncodingMutex.Lock()
	defer fake.ensureCredEncodingMutex.Unlock()
	fake.EnsureCredEncodingStub = stub
}

func (fake *TKGConfigUpdaterClient) EnsureCredEncodingArgsForCall(i int) *yaml.Node {
	fake.ensureCredEncodingMutex.RLock()
	defer fake.ensureCredEncodingMutex.RUnlock()
	argsForCall := fake.ensureCredEncodingArgsForCall[i]
	return argsForCall.arg1
}

func (fake *TKGConfigUpdaterClient) EnsureImages(arg1 bool, arg2 *yaml.Node) error {
	fake.ensureImagesMutex.Lock()
	ret, specificReturn := fake.ensureImagesReturnsOnCall[len(fake.ensureImagesArgsForCall)]
	fake.ensureImagesArgsForCall = append(fake.ensureImagesArgsForCall, struct {
		arg1 bool
		arg2 *yaml.Node
	}{arg1, arg2})
	fake.recordInvocation("EnsureImages", []interface{}{arg1, arg2})
	fake.ensureImagesMutex.Unlock()
	if fake.EnsureImagesStub != nil {
		return fake.EnsureImagesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.ensureImagesReturns
	return fakeReturns.result1
}

func (fake *TKGConfigUpdaterClient) EnsureImagesCallCount() int {
	fake.ensureImagesMutex.RLock()
	defer fake.ensureImagesMutex.RUnlock()
	return len(fake.ensureImagesArgsForCall)
}

func (fake *TKGConfigUpdaterClient) EnsureImagesCalls(stub func(bool, *yaml.Node) error) {
	fake.ensureImagesMutex.Lock()
	defer fake.ensureImagesMutex.Unlock()
	fake.EnsureImagesStub = stub
}

func (fake *TKGConfigUpdaterClient) EnsureImagesArgsForCall(i int) (bool, *yaml.Node) {
	fake.ensureImagesMutex.RLock()
	defer fake.ensureImagesMutex.RUnlock()
	argsForCall := fake.ensureImagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *TKGConfigUpdaterClient) EnsureImagesReturns(result1 error) {
	fake.ensureImagesMutex.Lock()
	defer fake.ensureImagesMutex.Unlock()
	fake.EnsureImagesStub = nil
	fake.ensureImagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *TKGConfigUpdaterClient) EnsureImagesReturnsOnCall(i int, result1 error) {
	fake.ensureImagesMutex.Lock()
	defer fake.ensureImagesMutex.Unlock()
	fake.EnsureImagesStub = nil
	if fake.ensureImagesReturnsOnCall == nil {
		fake.ensureImagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.ensureImagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *TKGConfigUpdaterClient) EnsureProviders(arg1 bool, arg2 *yaml.Node) error {
	fake.ensureProvidersMutex.Lock()
	ret, specificReturn := fake.ensureProvidersReturnsOnCall[len(fake.ensureProvidersArgsForCall)]
	fake.ensureProvidersArgsForCall = append(fake.ensureProvidersArgsForCall, struct {
		arg1 bool
		arg2 *yaml.Node
	}{arg1, arg2})
	fake.recordInvocation("EnsureProviders", []interface{}{arg1, arg2})
	fake.ensureProvidersMutex.Unlock()
	if fake.EnsureProvidersStub != nil {
		return fake.EnsureProvidersStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.ensureProvidersReturns
	return fakeReturns.result1
}

func (fake *TKGConfigUpdaterClient) EnsureProvidersCallCount() int {
	fake.ensureProvidersMutex.RLock()
	defer fake.ensureProvidersMutex.RUnlock()
	return len(fake.ensureProvidersArgsForCall)
}

func (fake *TKGConfigUpdaterClient) EnsureProvidersCalls(stub func(bool, *yaml.Node) error) {
	fake.ensureProvidersMutex.Lock()
	defer fake.ensureProvidersMutex.Unlock()
	fake.EnsureProvidersStub = stub
}

func (fake *TKGConfigUpdaterClient) EnsureProvidersArgsForCall(i int) (bool, *yaml.Node) {
	fake.ensureProvidersMutex.RLock()
	defer fake.ensureProvidersMutex.RUnlock()
	argsForCall := fake.ensureProvidersArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *TKGConfigUpdaterClient) EnsureProvidersReturns(result1 error) {
	fake.ensureProvidersMutex.Lock()
	defer fake.ensureProvidersMutex.Unlock()
	fake.EnsureProvidersStub = nil
	fake.ensureProvidersReturns = struct {
		result1 error
	}{result1}
}

func (fake *TKGConfigUpdaterClient) EnsureProvidersReturnsOnCall(i int, result1 error) {
	fake.ensureProvidersMutex.Lock()
	defer fake.ensureProvidersMutex.Unlock()
	fake.EnsureProvidersStub = nil
	if fake.ensureProvidersReturnsOnCall == nil {
		fake.ensureProvidersReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.ensureProvidersReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *TKGConfigUpdaterClient) EnsureTemplateFiles(arg1 bool) error {
	fake.ensureTemplateFilesMutex.Lock()
	ret, specificReturn := fake.ensureTemplateFilesReturnsOnCall[len(fake.ensureTemplateFilesArgsForCall)]
	fake.ensureTemplateFilesArgsForCall = append(fake.ensureTemplateFilesArgsForCall, struct {
		arg1 bool
	}{arg1})
	fake.recordInvocation("EnsureTemplateFiles", []interface{}{arg1})
	fake.ensureTemplateFilesMutex.Unlock()
	if fake.EnsureTemplateFilesStub != nil {
		return fake.EnsureTemplateFilesStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.ensureTemplateFilesReturns
	return fakeReturns.result1
}

func (fake *TKGConfigUpdaterClient) EnsureTemplateFilesCallCount() int {
	fake.ensureTemplateFilesMutex.RLock()
	defer fake.ensureTemplateFilesMutex.RUnlock()
	return len(fake.ensureTemplateFilesArgsForCall)
}

func (fake *TKGConfigUpdaterClient) EnsureTemplateFilesCalls(stub func(bool) error) {
	fake.ensureTemplateFilesMutex.Lock()
	defer fake.ensureTemplateFilesMutex.Unlock()
	fake.EnsureTemplateFilesStub = stub
}

func (fake *TKGConfigUpdaterClient) EnsureTemplateFilesArgsForCall(i int) bool {
	fake.ensureTemplateFilesMutex.RLock()
	defer fake.ensureTemplateFilesMutex.RUnlock()
	argsForCall := fake.ensureTemplateFilesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *TKGConfigUpdaterClient) EnsureTemplateFilesReturns(result1 error) {
	fake.ensureTemplateFilesMutex.Lock()
	defer fake.ensureTemplateFilesMutex.Unlock()
	fake.EnsureTemplateFilesStub = nil
	fake.ensureTemplateFilesReturns = struct {
		result1 error
	}{result1}
}

func (fake *TKGConfigUpdaterClient) EnsureTemplateFilesReturnsOnCall(i int, result1 error) {
	fake.ensureTemplateFilesMutex.Lock()
	defer fake.ensureTemplateFilesMutex.Unlock()
	fake.EnsureTemplateFilesStub = nil
	if fake.ensureTemplateFilesReturnsOnCall == nil {
		fake.ensureTemplateFilesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.ensureTemplateFilesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *TKGConfigUpdaterClient) GetDefaultInfrastructureVersion(arg1 string) (string, error) {
	fake.getDefaultInfrastructureVersionMutex.Lock()
	ret, specificReturn := fake.getDefaultInfrastructureVersionReturnsOnCall[len(fake.getDefaultInfrastructureVersionArgsForCall)]
	fake.getDefaultInfrastructureVersionArgsForCall = append(fake.getDefaultInfrastructureVersionArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetDefaultInfrastructureVersion", []interface{}{arg1})
	fake.getDefaultInfrastructureVersionMutex.Unlock()
	if fake.GetDefaultInfrastructureVersionStub != nil {
		return fake.GetDefaultInfrastructureVersionStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getDefaultInfrastructureVersionReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *TKGConfigUpdaterClient) GetDefaultInfrastructureVersionCallCount() int {
	fake.getDefaultInfrastructureVersionMutex.RLock()
	defer fake.getDefaultInfrastructureVersionMutex.RUnlock()
	return len(fake.getDefaultInfrastructureVersionArgsForCall)
}

func (fake *TKGConfigUpdaterClient) GetDefaultInfrastructureVersionCalls(stub func(string) (string, error)) {
	fake.getDefaultInfrastructureVersionMutex.Lock()
	defer fake.getDefaultInfrastructureVersionMutex.Unlock()
	fake.GetDefaultInfrastructureVersionStub = stub
}

func (fake *TKGConfigUpdaterClient) GetDefaultInfrastructureVersionArgsForCall(i int) string {
	fake.getDefaultInfrastructureVersionMutex.RLock()
	defer fake.getDefaultInfrastructureVersionMutex.RUnlock()
	argsForCall := fake.getDefaultInfrastructureVersionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *TKGConfigUpdaterClient) GetDefaultInfrastructureVersionReturns(result1 string, result2 error) {
	fake.getDefaultInfrastructureVersionMutex.Lock()
	defer fake.getDefaultInfrastructureVersionMutex.Unlock()
	fake.GetDefaultInfrastructureVersionStub = nil
	fake.getDefaultInfrastructureVersionReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *TKGConfigUpdaterClient) GetDefaultInfrastructureVersionReturnsOnCall(i int, result1 string, result2 error) {
	fake.getDefaultInfrastructureVersionMutex.Lock()
	defer fake.getDefaultInfrastructureVersionMutex.Unlock()
	fake.GetDefaultInfrastructureVersionStub = nil
	if fake.getDefaultInfrastructureVersionReturnsOnCall == nil {
		fake.getDefaultInfrastructureVersionReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getDefaultInfrastructureVersionReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *TKGConfigUpdaterClient) GetUpdateStatus() (bool, bool, bool, error) {
	fake.getUpdateStatusMutex.Lock()
	ret, specificReturn := fake.getUpdateStatusReturnsOnCall[len(fake.getUpdateStatusArgsForCall)]
	fake.getUpdateStatusArgsForCall = append(fake.getUpdateStatusArgsForCall, struct {
	}{})
	fake.recordInvocation("GetUpdateStatus", []interface{}{})
	fake.getUpdateStatusMutex.Unlock()
	if fake.GetUpdateStatusStub != nil {
		return fake.GetUpdateStatusStub()
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3, ret.result4
	}
	fakeReturns := fake.getUpdateStatusReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3, fakeReturns.result4
}

func (fake *TKGConfigUpdaterClient) GetUpdateStatusCallCount() int {
	fake.getUpdateStatusMutex.RLock()
	defer fake.getUpdateStatusMutex.RUnlock()
	return len(fake.getUpdateStatusArgsForCall)
}

func (fake *TKGConfigUpdaterClient) GetUpdateStatusCalls(stub func() (bool, bool, bool, error)) {
	fake.getUpdateStatusMutex.Lock()
	defer fake.getUpdateStatusMutex.Unlock()
	fake.GetUpdateStatusStub = stub
}

func (fake *TKGConfigUpdaterClient) GetUpdateStatusReturns(result1 bool, result2 bool, result3 bool, result4 error) {
	fake.getUpdateStatusMutex.Lock()
	defer fake.getUpdateStatusMutex.Unlock()
	fake.GetUpdateStatusStub = nil
	fake.getUpdateStatusReturns = struct {
		result1 bool
		result2 bool
		result3 bool
		result4 error
	}{result1, result2, result3, result4}
}

func (fake *TKGConfigUpdaterClient) GetUpdateStatusReturnsOnCall(i int, result1 bool, result2 bool, result3 bool, result4 error) {
	fake.getUpdateStatusMutex.Lock()
	defer fake.getUpdateStatusMutex.Unlock()
	fake.GetUpdateStatusStub = nil
	if fake.getUpdateStatusReturnsOnCall == nil {
		fake.getUpdateStatusReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 bool
			result3 bool
			result4 error
		})
	}
	fake.getUpdateStatusReturnsOnCall[i] = struct {
		result1 bool
		result2 bool
		result3 bool
		result4 error
	}{result1, result2, result3, result4}
}

func (fake *TKGConfigUpdaterClient) SaveTemplateFiles(arg1 string, arg2 bool) error {
	fake.saveTemplateFilesMutex.Lock()
	ret, specificReturn := fake.saveTemplateFilesReturnsOnCall[len(fake.saveTemplateFilesArgsForCall)]
	fake.saveTemplateFilesArgsForCall = append(fake.saveTemplateFilesArgsForCall, struct {
		arg1 string
		arg2 bool
	}{arg1, arg2})
	fake.recordInvocation("SaveTemplateFiles", []interface{}{arg1, arg2})
	fake.saveTemplateFilesMutex.Unlock()
	if fake.SaveTemplateFilesStub != nil {
		return fake.SaveTemplateFilesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.saveTemplateFilesReturns
	return fakeReturns.result1
}

func (fake *TKGConfigUpdaterClient) SaveTemplateFilesCallCount() int {
	fake.saveTemplateFilesMutex.RLock()
	defer fake.saveTemplateFilesMutex.RUnlock()
	return len(fake.saveTemplateFilesArgsForCall)
}

func (fake *TKGConfigUpdaterClient) SaveTemplateFilesCalls(stub func(string, bool) error) {
	fake.saveTemplateFilesMutex.Lock()
	defer fake.saveTemplateFilesMutex.Unlock()
	fake.SaveTemplateFilesStub = stub
}

func (fake *TKGConfigUpdaterClient) SaveTemplateFilesArgsForCall(i int) (string, bool) {
	fake.saveTemplateFilesMutex.RLock()
	defer fake.saveTemplateFilesMutex.RUnlock()
	argsForCall := fake.saveTemplateFilesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *TKGConfigUpdaterClient) SaveTemplateFilesReturns(result1 error) {
	fake.saveTemplateFilesMutex.Lock()
	defer fake.saveTemplateFilesMutex.Unlock()
	fake.SaveTemplateFilesStub = nil
	fake.saveTemplateFilesReturns = struct {
		result1 error
	}{result1}
}

func (fake *TKGConfigUpdaterClient) SaveTemplateFilesReturnsOnCall(i int, result1 error) {
	fake.saveTemplateFilesMutex.Lock()
	defer fake.saveTemplateFilesMutex.Unlock()
	fake.SaveTemplateFilesStub = nil
	if fake.saveTemplateFilesReturnsOnCall == nil {
		fake.saveTemplateFilesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.saveTemplateFilesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *TKGConfigUpdaterClient) SetDefaultConfiguration() {
	fake.setDefaultConfigurationMutex.Lock()
	fake.setDefaultConfigurationArgsForCall = append(fake.setDefaultConfigurationArgsForCall, struct {
	}{})
	fake.recordInvocation("SetDefaultConfiguration", []interface{}{})
	fake.setDefaultConfigurationMutex.Unlock()
	if fake.SetDefaultConfigurationStub != nil {
		fake.SetDefaultConfigurationStub()
	}
}

func (fake *TKGConfigUpdaterClient) SetDefaultConfigurationCallCount() int {
	fake.setDefaultConfigurationMutex.RLock()
	defer fake.setDefaultConfigurationMutex.RUnlock()
	return len(fake.setDefaultConfigurationArgsForCall)
}

func (fake *TKGConfigUpdaterClient) SetDefaultConfigurationCalls(stub func()) {
	fake.setDefaultConfigurationMutex.Lock()
	defer fake.setDefaultConfigurationMutex.Unlock()
	fake.SetDefaultConfigurationStub = stub
}

func (fake *TKGConfigUpdaterClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.checkBOMsNeedUpdateMutex.RLock()
	defer fake.checkBOMsNeedUpdateMutex.RUnlock()
	fake.checkInfrastructureVersionMutex.RLock()
	defer fake.checkInfrastructureVersionMutex.RUnlock()
	fake.checkProvidersNeedUpdateMutex.RLock()
	defer fake.checkProvidersNeedUpdateMutex.RUnlock()
	fake.checkTkgConfigNeedUpdateMutex.RLock()
	defer fake.checkTkgConfigNeedUpdateMutex.RUnlock()
	fake.decodeCredentialsInViperMutex.RLock()
	defer fake.decodeCredentialsInViperMutex.RUnlock()
	fake.ensureBOMFilesMutex.RLock()
	defer fake.ensureBOMFilesMutex.RUnlock()
	fake.ensureConfigImagesMutex.RLock()
	defer fake.ensureConfigImagesMutex.RUnlock()
	fake.ensureConfigPrerequisiteMutex.RLock()
	defer fake.ensureConfigPrerequisiteMutex.RUnlock()
	fake.ensureCredEncodingMutex.RLock()
	defer fake.ensureCredEncodingMutex.RUnlock()
	fake.ensureImagesMutex.RLock()
	defer fake.ensureImagesMutex.RUnlock()
	fake.ensureProvidersMutex.RLock()
	defer fake.ensureProvidersMutex.RUnlock()
	fake.ensureTemplateFilesMutex.RLock()
	defer fake.ensureTemplateFilesMutex.RUnlock()
	fake.getDefaultInfrastructureVersionMutex.RLock()
	defer fake.getDefaultInfrastructureVersionMutex.RUnlock()
	fake.getUpdateStatusMutex.RLock()
	defer fake.getUpdateStatusMutex.RUnlock()
	fake.saveTemplateFilesMutex.RLock()
	defer fake.saveTemplateFilesMutex.RUnlock()
	fake.setDefaultConfigurationMutex.RLock()
	defer fake.setDefaultConfigurationMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *TKGConfigUpdaterClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ tkgconfigupdater.Client = new(TKGConfigUpdaterClient)
